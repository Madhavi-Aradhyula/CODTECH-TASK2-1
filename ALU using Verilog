//DUT
module alu(
           input [7:0] A,B,  // ALU 8-bit Inputs                 
           input [3:0] ALU_Sel,// ALU Selection
           output [7:0] ALU_Out, // ALU 8-bit Output
           output CarryOut // Carry Out Flag
    );
    reg [7:0] ALU_Result;
    wire [8:0] tmp;
    assign ALU_Out = ALU_Result; // ALU out
    assign tmp = {1'b0,A} + {1'b0,B};
    assign CarryOut = tmp[8]; // Carryout flag
    always @(*)
    begin
        case(ALU_Sel)
        4'b0000: // Addition
           ALU_Result = A + B ; 
        4'b0001: // Subtraction
           ALU_Result = A - B ;
        4'b0010: // Multiplication
           ALU_Result = A * B;
        4'b0011: // Division
           ALU_Result = A/B;
          4'b00100: //  Logical and 
           ALU_Result = A & B;
          4'b0101: //  Logical or
           ALU_Result = A | B;
          4'b0110: //  Logical xor 
           ALU_Result=~A;
           
          default: ALU_Result = 0 ; 
        endcase
    end

endmodule


//TESTBENCH
module tb_alu;
//Inputs
 reg[7:0] A,B;
 reg[3:0] ALU_Sel;

//Outputs
 wire[7:0] ALU_Out;
 wire CarryOut;
 // Verilog code for ALU
 integer i;
 alu test_unit(
            A,B,  // ALU 8-bit Inputs                 
            ALU_Sel,// ALU Selection
            ALU_Out, // ALU 8-bit Output
            CarryOut // Carry Out Flag
     );
    initial begin
    // hold reset state for 100 ns.
      A = 8'h0A;
      B = 4'h02;
      ALU_Sel = 4'h0;
      
      for (i=0;i<=6;i=i+1)
      begin
       ALU_Sel =i;
       #10;
      end
      
    end
    initial begin
    $monitor("ALU_Sel=%b,A=%b,B=%b,ALU_Out=%b,CarryOut=%b",ALU_Sel,A,B,ALU_Out,CarryOut);
    end
    initial begin
    $dumpfile("dump.vcd");
      $dumpvars(0,A,B,ALU_Sel,ALU_Out,CarryOut);
    end
endmodule
 
